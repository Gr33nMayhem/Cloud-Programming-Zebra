# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RetrieveAllForMediaSentimentScores(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, text: str=None, score: float=None, _date: int=None):  # noqa: E501
        """RetrieveAllForMediaSentimentScores - a model defined in Swagger

        :param id: The id of this RetrieveAllForMediaSentimentScores.  # noqa: E501
        :type id: str
        :param text: The text of this RetrieveAllForMediaSentimentScores.  # noqa: E501
        :type text: str
        :param score: The score of this RetrieveAllForMediaSentimentScores.  # noqa: E501
        :type score: float
        :param _date: The _date of this RetrieveAllForMediaSentimentScores.  # noqa: E501
        :type _date: int
        """
        self.swagger_types = {
            'id': str,
            'text': str,
            'score': float,
            '_date': int
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'score': 'score',
            '_date': 'date'
        }
        self._id = id
        self._text = text
        self._score = score
        self.__date = _date

    @classmethod
    def from_dict(cls, dikt) -> 'RetrieveAllForMediaSentimentScores':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The retrieve_all_for_media_sentiment_scores of this RetrieveAllForMediaSentimentScores.  # noqa: E501
        :rtype: RetrieveAllForMediaSentimentScores
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RetrieveAllForMediaSentimentScores.


        :return: The id of this RetrieveAllForMediaSentimentScores.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RetrieveAllForMediaSentimentScores.


        :param id: The id of this RetrieveAllForMediaSentimentScores.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this RetrieveAllForMediaSentimentScores.


        :return: The text of this RetrieveAllForMediaSentimentScores.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this RetrieveAllForMediaSentimentScores.


        :param text: The text of this RetrieveAllForMediaSentimentScores.
        :type text: str
        """

        self._text = text

    @property
    def score(self) -> float:
        """Gets the score of this RetrieveAllForMediaSentimentScores.


        :return: The score of this RetrieveAllForMediaSentimentScores.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this RetrieveAllForMediaSentimentScores.


        :param score: The score of this RetrieveAllForMediaSentimentScores.
        :type score: float
        """

        self._score = score

    @property
    def _date(self) -> int:
        """Gets the _date of this RetrieveAllForMediaSentimentScores.


        :return: The _date of this RetrieveAllForMediaSentimentScores.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date: int):
        """Sets the _date of this RetrieveAllForMediaSentimentScores.


        :param _date: The _date of this RetrieveAllForMediaSentimentScores.
        :type _date: int
        """

        self.__date = _date
