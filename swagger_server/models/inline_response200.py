# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.analyze_sentiment_scores import AnalyzeSentimentScores  # noqa: F401,E501
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, average_magnitude: float=None, sentiment_scores: List[AnalyzeSentimentScores]=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param id: The id of this InlineResponse200.  # noqa: E501
        :type id: str
        :param average_magnitude: The average_magnitude of this InlineResponse200.  # noqa: E501
        :type average_magnitude: float
        :param sentiment_scores: The sentiment_scores of this InlineResponse200.  # noqa: E501
        :type sentiment_scores: List[AnalyzeSentimentScores]
        """
        self.swagger_types = {
            'id': str,
            'average_magnitude': float,
            'sentiment_scores': List[AnalyzeSentimentScores]
        }

        self.attribute_map = {
            'id': 'id',
            'average_magnitude': 'average_magnitude',
            'sentiment_scores': 'sentiment_scores'
        }
        self._id = id
        self._average_magnitude = average_magnitude
        self._sentiment_scores = sentiment_scores

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this InlineResponse200.


        :return: The id of this InlineResponse200.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this InlineResponse200.


        :param id: The id of this InlineResponse200.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def average_magnitude(self) -> float:
        """Gets the average_magnitude of this InlineResponse200.


        :return: The average_magnitude of this InlineResponse200.
        :rtype: float
        """
        return self._average_magnitude

    @average_magnitude.setter
    def average_magnitude(self, average_magnitude: float):
        """Sets the average_magnitude of this InlineResponse200.


        :param average_magnitude: The average_magnitude of this InlineResponse200.
        :type average_magnitude: float
        """

        self._average_magnitude = average_magnitude

    @property
    def sentiment_scores(self) -> List[AnalyzeSentimentScores]:
        """Gets the sentiment_scores of this InlineResponse200.


        :return: The sentiment_scores of this InlineResponse200.
        :rtype: List[AnalyzeSentimentScores]
        """
        return self._sentiment_scores

    @sentiment_scores.setter
    def sentiment_scores(self, sentiment_scores: List[AnalyzeSentimentScores]):
        """Sets the sentiment_scores of this InlineResponse200.


        :param sentiment_scores: The sentiment_scores of this InlineResponse200.
        :type sentiment_scores: List[AnalyzeSentimentScores]
        """

        self._sentiment_scores = sentiment_scores
